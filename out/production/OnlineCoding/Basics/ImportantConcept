Time Complexity:- https://www.freecodecamp.org/news/big-o-cheat-sheet-time-complexity-chart/

    O(1) - Constant time
    O(log(n)) - Logarithmic time
    O(n log(n)) - Linearithmic time
    O((log(n))c) - Polylogarithmic time
    O(n) - Linear time
    O(n2) - Quadratic time
    O(nc) - Polynomial time
    O(cn) - Exponential time
    O(n!) - Factorial time

Note:- Exponential (c^n) >>>> polynomial (n^c)

circuit breaker
java version differences
where had we deployed our code (AWS cloud EC2)
multithreading

======================================================================================
Rate limitter:-
https://leetcode.com/discuss/interview-question/system-design/124558/Uber-or-Rate-Limiter
leaky bucket
sliding window


concurrency in java :-
https://www.vogella.com/tutorials/JavaConcurrency/article.html
[A visibility problem occurs if thread A reads shared data which is later changed by thread B and thread A is unaware of this change.]
======================================================================================
Convert String to charArray then sort then store it in New String

char tempArray[] = str.toCharArray();
Arrays.sort(tempArray);
String sortedStr = String.valueOf(tempArray);

======================================================================================
Declare and initialize Map which has Key=> String and value => ArrayList<String>

str is String
Map<String,ArrayList<String>> map  = new HashMap<>();
map.put(sortedStr,new ArrayList<String>(Arrays.asList(str)));

======================================================================================
Declare ArrayList within ArrayList and declare memory for internal ArrayList as
public class BfsPart2 {
    int v;
    ArrayList<ArrayList<Integer>> adjList;

    BfsPart2(int v) {
        this.v = v;
        adjList = new ArrayList<>();

        for (int i = 0; i < v; i++) {
            adjList.add(i, new ArrayList<>()); // on index "i" insert element which is new ArrayList<>()
        }
    }
 }

======================================================================================
SubSequences vs Subarray [Both should have order] striver recurssion lecture 6

a[] = {1,2,3}

SubSequences (Contiguous/non-contiguous) [1], [2], [3], [1 2], [2 3], [1 3], [1 2 3]
SubArray (Contiguous) [1], [2], [3], [1 2], [1 3(NO)], [2 3] , [1 2 3]


======================================================================================
If we have given ArrayList<int[]> output;
1) if Asked for last element of arraylist based 1st index of array then
output.get(output.size()-1)[1];
2) if Asked to update that element that same as above
Ex:-
output.get(output.size()-1)[1] = anyValue;

3) If we have to return "int[][]" from method whereas we have
ArrayList<int[]> output = new ArrayList<int[]>();
then
 return output.toArray(new int[output.size()][]);

======================================================================================
Comparator vs Comparable and BinarySearch and Sort methods
https://docs.google.com/document/d/1REFGrpRjfMp15TsvQg4s2n5vBMm97qsY9UK9lD1GDdM/edit

for a list :- [to get elements in descending order]
Collections.sort(list, Collections.reverseOrder());
for an array :- [to get elements in descending order]
Arrays.sort(array, Collections.reverseOrder());

 This method sorts the specified range of array in ascending order.
 // To sort the array using normal sort
        Arrays.sort(intArr, 1, 3); [fromIndex,EndIndex] 1 index->included, 3 index->Excluded

These methods search for the specified element in the array with the help of Binary Search algorithm.
Arrays.binarySearch(intArr, intKey));

This method searches a range of the specified array for the specified object using the binary search algorithm.
Arrays.binarySearch(intArr, 1, 3, intKey)); 1 index->included, 3 index->Excluded

This method assigns this fillValue to each index of this Arrays.
// Get the Arrays
        int intArr[] = { 10, 20, 15, 22, 35 };
        int intKey = 22;
Arrays.fill(intArr, intKey);
// To fill the arrays
        System.out.println("Integer Array on filling: "
                           + Arrays.toString(intArr));
Output: Integer Array on filling: [22, 22, 22, 22, 22]

======================================================================================
Store array into 2*size to make it circular array
 for (int i = 0; i < n * 2; i++) {
            temp[i] = nums[i % n];
        }

        Note:- i starts from zero(0) 'n' which is actual size of Array
======================================================================================
when number as n = 123 given and need to put in array from starting to last index as per digit
 void fillArrayList(int n, ArrayList<Integer> digits){
        if(n<=0) return;
        int d = n % 10;
        fillArrayList(n/10,digits);
        digits.add(d);
    }
======================================================================================
Collections.sort(list.subList(0,3)); // Sorting a part of list
Collections.reverse(arrayList);
======================================================================================
Dutch national Flag Algorithm ex:- https://www.youtube.com/watch?v=oaVa-9wmpns&list=PLgUwDviBIf0rPG3Ictpu74YWBQ1CaBkm2&index=4
https://leetcode.com/problems/sort-colors/submissions/877393842/

======================================================================================
Convert row to column or vice-versa for 2D matrix
 for(int i=0;i<rowNum;i++){
                for(int j=0;j<i;j++){
                    int t = matrix[j][i];
                    matrix[j][i] = matrix[i][j];
                    matrix[i][j] = t;
                }
            }
======================================================================================
Power function in java
public static double pow(double a, double b)
Parameter:
a : this parameter is the base
b : this parameter is the exponent.
Return :
This method returns a^b
Math.power(a,b);
======================================================================================
If we need to fill any 2D array with any default value
// note:- here a represent each row of 2d array
Arrays.stream(array_name).forEach(a-> Arrays.fill(a,-1));
======================================================================================
 // Integer/String is a class which can be used to reverse
 Integer i[] = {1,2,3,4,5,6};
 Collections.reverse(Arrays.asList(i));
 System.out.println(Arrays.toString(i));
 // output :- [6, 5, 4, 3, 2, 1]

 Below won't work
 int i[] = {1,2,3,4,5,6};
  Collections.reverse(Arrays.asList(i));
  System.out.println(Arrays.toString(i));
 // output :- [1, 2, 3, 4, 5, 6]

 ======================================================================================
 String is immutable whereas StringBuffer and StringBuilder are mutable classes.
 StringBuffer is thread-safe and synchronized whereas StringBuilder is not.
 That's why StringBuilder is faster than StringBuffer.

 ======================================================================================